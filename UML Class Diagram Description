Classes and their description
The Movie class consists of 7 attributes that range from Strings, ints, or bools.
- movieName: String
  - This is the title of the movie.
  - Example: “Avengers: Endgame”, “Whiplash”
- date: int
  -This shows the date of the movie in the “MMDDYYYY” format
- time: int
  - This is the time that the movie will play and will be shown in a 24-hour format
- screen: int
  - The screen number where the movie is being shown
- rating: String
  - This is the movie’s age rating, for example, “PG”, “PG-13”, or “R”
- location: String
  - The theater location where the movie is playing
- seats: Map<bool>
  - A map of seat availability, will be true if the seat is available, but will be false if the seat is taken.
  - Example: {1: True, 2: False, 3: True} - Seat 1 is available, seat 2 is taken, and seat 3 is available.
The Movie class contains 4 methods (operations)
- setName(String): void-
  - This method sets the name of the movie
  - Has parameter - name which is a string containing the new name of the movie
  - This method allows the admin to set a new name if the movie needs to be updated or changed.
  - Returns nothing (void)
- getName(): String
  - This method returns the name of the movie
  - When a user selects a movie, this method is called to retrieve the movie’s name to display on the UI.
  - Returns a string containing the name of the movie
- getFreeSeats(): Map<bool>
  - This method retrieves the current seating map and returns the seats available
  - This method displays to a user the available seats
  - Returns a map where each seat index is associated with availability
- isSeatFree(index: int): bool
  - This method checks if a specific seat is free or available
  - contains parameter index - an integer representing the seat index or number

The TheaterLocation class handles the management of movies and their related operations for specific theater locations and has 4 attributes.
- movies: Movie[] 
  - A collection of Movie objects representing all the movies currently available at this theater location
- theaterName: String
  - The name of the theater
  - Example: “AMC Mission Valley”
- address: String
  - The physical address of the theater location
- capacity: int
  - The total seating capacity of the theater. This is the total number of seats across all screens in the theater
The theaterLocation class contains 3 operations that all relate to updating movies at specific locations
- updateMovie(movie: Movie): void
  - This method updates an existing movie’s details at the theater
  - Contains the parameter movie: movie object contains details like showtime, screen, or rating
  - This method is used when a movie’s information changes and needs to be updated in the system
  - Returns: Nothing (void)
- addMovie(movie: Movie): void
  - Adds a new movie to the theater’s list of available movies
  - has parameter movie which is a Movie object representing the new movie added to the theater’s schedule
  - This method is called when a new movie is added to the theater’s schedule
  - Returns Nothing(void)
- listMovies(): List<Movie>
  - Returns a list of all movies currently playing at a specific theater
  - The method is called when a user/admin wants to see all movies available at this specific theater location
  - Returns a list of Movie objects playing at the theater

The Ticket class has 3 attributes all relating to purchased/available tickets for movies
- ticketID: int
  - An identifier for the ticket. This ID is used to differentiate between tickets
- seat: (int, int)
  - Represents the seat location in the format (row, seatNumber) in the theater.
- price: float
  - This is the price of the ticket.
The Ticket class also has 3 methods 
- buyTicket(): void
  - Executes the purchase of a ticket from a user, once the ticket is bought, the seat associated with it is unavailable
  - This method is used when the user finalizes their purchase and confirms seat selection
  - Returns: Nothing(void)
- cancelTicket(): void
  - Cancel the ticket. The ticket becomes invalid and the associated seat is available again
  - The method is called if a user requests a ticket voucher and cancels their ticket before showtime
  - Returns Nothing(void)
- printTicket(): void
  - Prints the ticket details including movie name, seat number, theater location, and other ticket info
  - This method can be used when a user wants to generate a hard copy of their ticket or print a receipt
  - Returns: Nothing(void)

The MakePayment class deals with the payment process, associating tickets with transactions, confirming purchases, and updating seat availability. The class has 4 attributes
- transactionID: int
  - An identifier for the payment transaction
- myTicket: Ticket
  - A reference to the Ticket object that is being paid for.
- paymentMethod: String
  - method used to process the payment (credit card, debit card, or PayPal)
- amount: float
  - The total amount being paid for the ticket. Ticket price with added taxes or fees
The MakePayment class has two operations
- confirmPurchase(ticket: Ticket): int
  - Confirms payment for a specific ticket, processes the payment, updates transaction and returns unique transaction ID
  - contains parameter ticket: a Ticket object representing the ticket being purchased
  - Returns an int representing the transactionID
- updateSeats(ticket: Ticket): void
  - Updates seat availability for the movie once the ticket is purchased.
  - has parameter ticket: a Ticket object representing the seat that’s been purchased
  - After payment is confirmed, method is used to mark seat as taken in the chart
  - Returns Nothing(void)

The class AccountInfo contains 3 String attributes:
- Email address (uses letters, numbers, symbols)
- Password (uses letters, numbers, symbols)
- Phone number (uses numbers and symbols such as (xxx)-xxx-xxxx)

AccountInfo is a generalization of AdminInfo and UserInfo.
All AdminInfo and UserInfo will have the attributes of AccountInfo as well as the individual attributes and operations of each class.
	
AdminInfo class has an Admin ID int attributes containing 6 integers (xxxxxx)
The class also has 3 operations for managing movies in the theater:
- addMovie(Movie, Theater): void
  + This function takes a Movie object as a parameter to be added to the Theater parameter
  + This function returns nothing/void
- deleteMovie(Movie, Theater): void
  + This function takes a Movie object as a parameter to be deleted from the Theater parameter
  + This function returns nothing/void
- updateTime(Movie, Theater, int): void
  + This function takes a Movie object as a parameter to have its showtime updated  
  + This function takes a Theater parameter for Movies at a specific location
  + This function takes an int parameter as new showtime
  + This function returns nothing/void

AdminInfo uses the Movie and Theater class/object

UserInfo class has 3 attributes:
- loyaltyPoints: int
  + This loyalty point system will be represented by numbers, higher points means better rewards
- rewardAvailable: String
  + Display what rewards are available to claim as a String
- rewardStatus: bool
  + Rewards that are claimed are marked as True and will show up during payments
  + Rewards that are not claimed are marked as False and will not show up


The UserInfo class has 5 operations that a user can do:
- viewMovies(): void
  + This method allows user to view all available Movies from all Theaters
  + This method returns nothing/void
- pickMovies(Movie): void
  + This method takes a Movie object as a parameter 
  + Selected movie will display all attributes of the Movie class for that specific movie
  + This method returns nothing/void
- requestRefund(): void
  + This method allows users to set their tickets invalid and get free ticket coupons that expire 1 year after the refund is executed
  + This method returns nothing/void as well as no change to the availability of seats
- updateLoyalty(int, int): int
  + This method takes 2 int as parameter, the first int being the current point, the second int being the points being added
  + This method will add the 2 parameters and return the new loyalty point as an int
- viewFeedback(): void
  + This method will show all user feedback for movies and theaters, in descending order of the feedbackID (meaning the most recent will show up first and the first ever feedback will show up last)
  + This method returns nothing/void


UserFeedback is part of UserInfo (Aggregation)
UserFeedback is associated with the Movie class and Theater class

For each feedback, UserFeedback has 4 attributes:
- feedbackID: int
  + This will help separating and ordering the feedback, the IDs will start with 000001 and increase by one for each feedback.
- content: String
  + This is the main part of the feedback, written as a String
- rating: int
  + This will be a number from 0 to 10, 10 represents the highest rating for the best movies or theater
- feedbackDate: int
  + Record the day of the feedback in MMDDYYYY format with integers
 
UserFeedback has 2 operations:
- editFeedback(String): void
  + This method allows a user to edit the content of an existing feedback
- getRating(): int
  + This method returns an integer representing the rating given in the feedback

  
